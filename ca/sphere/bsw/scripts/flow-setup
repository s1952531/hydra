#!/bin/csh

#=========================================================================#
#   Job setup script for the bsw class of f90 codes.
#   
#=========================================================================#

#==========================================================================

echo
echo '--------------------------------------------------------'
echo '          The balanced spherical shallow-water'
echo '          Combined Lagrangian Advection Method'
echo '--------------------------------------------------------'

# Specify code numerical method class:
set meth="ca"
# Specify code geometry:
set geom="sphere"
# Specify model equation type:
set equa="bsw"

# Ask for code version (typically OpenMP or not):
echo
echo ' Which version of the code should be used?'
echo -n ' (1) Serial, or (2) OpenMP - (default 1)? '
set version=$<
if ($version == "") set version="1"

if ($version == "1") then
   set algo="caps"
else
   set algo="omp_caps"
endif    

#==========================================================================
# The following is totally generic!
set local_home=${HOME}
set hydradir=$local_home/hydra/$meth/$geom/$equa

# Get output base directory:
set workdir=`workdir`
# Make the base data directory if it does not already exist:
if (!(-d $workdir)) mkdir $workdir
set workdir=$workdir/hydra
if (!(-d $workdir)) mkdir $workdir
set basedir=$workdir/$meth
if (!(-d $basedir)) mkdir $basedir
set basedir=$basedir/$geom
if (!(-d $basedir)) mkdir $basedir
set basedir=$basedir/$equa
if (!(-d $basedir)) mkdir $basedir
set basedir=$basedir/$algo
if (!(-d $basedir)) mkdir $basedir

set outdir=$workdir/$meth/$geom/$equa/$algo

# Assign source and binary directories:
set srcdir=$hydradir/$algo
set bindir=$hydradir/scripts

# Default number of bytes representing a single character:
set n_b_p_c=1   #This is the value valid for gfortran

# Get the name of the computer to record in the job_info file below:
set host=`hostname | awk -F. '{print $(1)}'`

#==========================================================================
# generate a random number seed based on current time:
set second=`date +%-S`
set minute=`date +%-M`
set hour=`date +%-H`
set day=`date +%-d`
@ iseed = ( $second + ( 60 * ( $minute + 60 * ( $hour + ( 24 * $day ) ) ) ) )

# Create a temporary directory:
set tmpdir=$outdir/tmp{$iseed}
mkdir $tmpdir
cd $tmpdir

echo
echo ' *** Job will be built in the temporary directory '
echo $tmpdir

# Create a job information summary file:
touch job_info
echo ' Job created at                      ' `date` >> job_info
echo ' on                                  ' $host >> job_info

#==========================================================================
# Get the data generation routine to be used:
set dataopt="1"
echo
echo ' Choose one of the following flow initialisation methods:'
echo ' (1) initially random PV anomaly,'
echo ' (2) the modified Rossby-Haurwitz test case,'
echo ' (3) a random height anomaly in a state of rest, or'
echo -n ' (4) the dam break - (default' $dataopt')? '
set var=$<
if ($var != "") set dataopt=$var

# Set defaults for each data generation type:

if ($dataopt == "1") then 
   set datagen = "randompv"
   set forcing = "n"
   set damping = "n"
   set topogra = "n"
   set kd = "12"
   set ng="256"
   set nq="80"
   set t_gsave="2.0"
   set t_csave="20.0"
   set t_sim="200.0"
   set tramp="0.0"
   set rthini="0.0"
   set rthfin="0.0"
   set atherm="0.0"
   set rekman="0.0" 
   set esr="0.0" 
   set ksr="16" 
   set atopo="0.0"
   set btopo="0.0"
   set ftopo="0.0"

else if ($dataopt == "2") then 
   set datagen = "rossby"
   set forcing = "n"
   set damping = "n"
   set topogra = "n"
   set kd = "20"
   set ng="256"
   set nq="80"
   set t_gsave="0.5"
   set t_csave="5.0"
   set t_sim="15.0"
   set tramp="0.0"
   set rthini="0.0"
   set rthfin="0.0"
   set atherm="0.0"
   set rekman="0.0" 
   set esr="0.0" 
   set ksr="16" 
   set atopo="0.0"
   set btopo="0.0"
   set ftopo="0.0"

else if ($dataopt == "3") then 
   set datagen = "adjust"
   set forcing = "n"
   set damping = "n"
   set topogra = "n"
   set kd = "25"
   set ng="128"
   set nq="80"
   set t_gsave="1.0"
   set t_csave="10.0"
   set t_sim="250.0"
   set tramp="0.0"
   set rthini="0.0"
   set rthfin="0.0"
   set atherm="0.0"
   set rekman="0.0" 
   set esr="0.0" 
   set ksr="16" 
   set atopo="0.0"
   set btopo="0.0"
   set ftopo="0.0"

else if ($dataopt == "4") then 
   set datagen = "dambreak"
   set forcing = "n"
   set damping = "n"
   set topogra = "n"
   set kd = "10"
   set ng="128"
   set nq="80"
   set t_gsave="1.0"
   set t_csave="10.0"
   set t_sim="250.0"
   set tramp="0.0"
   set rthini="0.0"
   set rthfin="0.0"
   set atherm="0.0"
   set rekman="0.0" 
   set esr="0.0" 
   set ksr="16" 
   set atopo="0.0"
   set btopo="0.0"
   set ftopo="0.0"

else 
   echo ' Not a valid choice - exiting...'
   /bin/rm -r $tmpdir  
   exit(-1)
endif

#==========================================================================
# Set fixed constants:
set pi=3.14159265358979
set twopi=`echo "scale=10; 2 * $pi" | bc -l`

#==========================================================================
# Choose basic physical parameters:
echo
echo ' We consider a planet of radius 1 rotating with a period of one "day".'

echo
echo -n ' Polar deformation wavenumber, 2*omega/c, (default' $kd')? '
set var=$<
if ($var != "") set kd=$var

# Planetary rotation rate:
set omega=$twopi
set fpole=`echo "2*$omega" | bc -l`
# Set (short-scale) gravity wave speed:
set cgw=`echo "scale=10; $fpole/$kd" | bc -l`
echo ' This corresponds to a gravity wave speed of c = '$cgw

echo ' Planetary rotation rate, omega:     ' $omega >> job_info
echo ' Polar deformation wavenumber, k_d:  ' $kd >> job_info
echo ' Short-scale gravity wave speed, c:  ' $cgw >> job_info

# Set basic grid resolution:
echo
echo ' A longitude-latitude grid of dimensions 2*ng x ng is used.'
echo -n ' Number of latitudes, ng (default' $ng')? '
set var=$<
if ($var != "") set ng=$var

echo ' ' >> job_info
echo ' Horizontal grid resolution, ng:     ' $ng >> job_info

# Latitudinal grid spacing:
set gl=`echo "$pi / $ng" | bc -l`

#==========================================================================
# Set the PV jump across contours:
echo
echo -n ' Number of PV jumps to represent f = 2*Omega*sin(lat) (default' $nq')? '
set var=$<
if ($var != "") set nq=$var

echo ' ' >> job_info
echo ' No. of PV jumps to represent f, nq: ' $nq >> job_info

#==========================================================================
# Set numerical parameters:

#-------------------------------------------------------------------
# Data save frequency:
echo
echo -n ' Time interval between gridded data saves (default' $t_gsave')? '
set var=$<
if ($var != "") set t_gsave=$var

echo ' Time interval between data saves:   ' $t_gsave >> job_info

echo
echo -n ' Time interval between contour data saves (default' $t_csave')? '
set var=$<
if ($var != "") set t_csave=$var

echo ' Time interval between contour saves:' $t_csave >> job_info

echo
echo -n ' Duration of entire simulation (default' $t_sim')? '
set var=$<
if ($var != "") set t_sim=$var

echo ' Duration of entire simulation:      ' $t_sim >> job_info

#-------------------------------------------------------------------
# Choose a marginally gravity-wave resolving time step:
set dtmult="0.75"
echo -n ' We choose the time step dt = M*dx/c; enter M (default' $dtmult'): '
set var=$<
if ($var != "") set dtmult=$var

set dt_gw=`echo "scale=14; $gl / $cgw" | bc -l`
set dt=`echo "scale=14; $dtmult*$dt_gw" | bc -l`
# Adjust to be a fraction of the grid save time:
set fac=`echo "scale=14; $t_gsave/$dt" | bc -l`
set dt=`echo "scale=14; $t_gsave/$fac:r" | bc -l`
echo ' This corresponds to dt =' $dt

echo ' ' >> job_info
echo ' Gravity-wave resolving time step:   ' $dt_gw >> job_info
echo ' Time step used:                     ' $dt >> job_info

#-------------------------------------------------------------------
# Hyperviscosity:
set nnu=3
set drate="20"
echo
echo ' ***Lap^'{$nnu} 'Hyperdiffusion is applied to spectral fields.'
echo -n ' Damping rate on wavenumber k = ng (default' $drate')? '
set var=$<
if ($var != "") set drate=$drate

echo ' ' >> job_info
echo ' ***Lap^'{$nnu} 'Hyperdiffusion used' >> job_info
echo ' Damping rate on k = ng is C*f;    C:' $drate >> job_info

#-------------------------------------------------------------------
# Set ramping timescale:
#echo
#echo -n ' Duration of ramping period to initialise flow (default' $tramp')? '
#set var=$<
#if ($var != "") set tramp=$var

#echo ' Ramping period:                     ' $tramp >> job_info

#-------------------------------------------------------------------
# Set thermal and Ekman damping:
if ($damping == "y") then 
   echo
   echo ' The thermal damping decays from rth_i to rth_f according to'
   echo '    rth = rth_i*exp(-at) + (1 - exp(-at))*rth_f.'
   echo -n ' Initial thermal damping rate, rth_i (default' $rthini')? '
   set var=$<
   if ($var != "") set rthini=$var
   echo -n ' Final thermal damping rate, rth_f (default' $rthfin')? '
   set var=$<
   if ($var != "") set rthfin=$var
   echo -n ' Rate of change, a (default' $atherm')? '
   set var=$<
   if ($var != "") set atherm=$var

   echo
   echo -n ' Ekman damping rate, r_ek (default' $rekman')? '
   set var=$<
   if ($var != "") set rekman=$var

   echo ' ' >> job_info
   echo ' Initial thermal damping rate:       ' $rthini >> job_info
   echo '  Final  thermal damping rate:       ' $rthfin >> job_info
   echo ' Rate of change of damping:          ' $atherm >> job_info
   echo ' Ekman damping rate:                 ' $rekman >> job_info
endif

# Set stochastic forcing parameters:
if ($forcing == "y") then 
   echo
   echo ' The enstrophy forcing spectrum is proportional to k^5*exp(-2k^2/k_0^2).'

   echo
   echo -n ' Wavenumber centroid k_0 of enstrophy injection (default' $ksr')? '
   set var=$<
   if ($var != "") set ksr=$var

   echo
   echo -n ' Enstrophy injection rate (default' $esr')? '
   set var=$<
   if ($var != "") set esr=$var

   echo ' ' >> job_info
   echo ' Enstrophy injection rate:           ' $esr   >> job_info
   echo ' Enstrophy injection wavenumber:     ' $ksr   >> job_info
else
   if ($dataopt == "4") then 
      echo
      @ ksr = ( $ng / 16 )
      echo -n ' Characteristic wavenumber of initial perturbation (default' $ksr')? '
      set var=$<
      if ($var != "") set ksr=$var

      echo ' ' >> job_info
      echo ' Char. wavenumber of initial pert.:  ' $ksr   >> job_info
   endif
endif

# Set topographical parameters:
if ($topogra == "y") then 
   echo
   echo ' Topography oscillates with amplitude a + b*sin(f*t).'
   echo -n ' Time mean topographic amplitude, a (default' $atopo')? '
   set var=$<
   if ($var != "") set atopo=$var
   echo -n ' Amplitude of time variation of topography, b (default' $btopo')? '
   set var=$<
   if ($var != "") set btopo=$var
   echo -n ' Frequency of time variation of topography, f (default' $ftopo')? '
   set var=$<
   if ($var != "") set ftopo=$var

   echo ' ' >> job_info
   echo ' Time mean topo. amplitude           ' $atopo >> job_info
   echo ' Amplitude of variation of topo.     ' $btopo >> job_info
   echo ' Frequency of variation of topo.     ' $ftopo >> job_info
endif

#============================================================
# Build parameter file with cpp and make all codes:

# Put all these dimensions into the dimens file needed for compilation:
mkdir src
cd src
cp $srcdir/* .
cp -r $hydradir/init .
cp -r $hydradir/post .

echo 
echo " Compiling source files....."
echo " ---------------------------------------------------"

# Use C pre-processor to put chosen parameters $copts into parameters.f90
set copts1="-DN_G=$ng -DT_STEP={$dt}d0 -DT_GSAVE={$t_gsave}d0 -DT_CSAVE={$t_csave}d0 -DT_SIM={$t_sim}d0"
set copts2="-DT_RAMP={$tramp}d0 -DN_CONTQ={$nq} -DPOW_HYPER=$nnu -DD_RATE={$drate}d0 -DCOR_FREQ={$fpole}d0 -DC_GW={$cgw}d0"
set copts3="-DR_THINI={$rthini}d0 -DR_THFIN={$rthfin}d0 -DA_THERM={$atherm}d0 -DR_EKMAN={$rekman}d0" 
set copts4="-DESR={$esr}d0 -DKSR=$ksr -DISEED=$iseed"
set copts5="-DA_TOPO={$atopo}d0 -DB_TOPO={$btopo}d0 -DF_TOPO={$ftopo}d0"
set copts=`echo $copts1 $copts2 $copts3 $copts4 $copts5`
precomp $copts parameters.f90

# Compile all codes and move sources to sub-directory:
make caps setup $datagen proxy_post_all install clean

cd ..
echo " ---------------------------------------------------"
echo 

#============================================================
# Execute the data generation script:
$bindir/$datagen

#==========================================================================
# Create a directory named after the data generation script:
cd ..
if (!(-d $datagen)) mkdir $datagen
cd $datagen

# Set the job directory name:
echo
echo -n ' Job directory name (default n'{$ng}'kd'{$kd}'dr'{$drate}')? '
set basejobdir=$<
if ($basejobdir == "") set basejobdir=n{$ng}kd{$kd}dr{$drate}

# work out the last run which has been performed:
# First make a bogus empty directory so this works!
mkdir {$basejobdir}r000
set last_run = `/bin/ls -d {$basejobdir}r??? | tail -c 4 | head -c 3`
rmdir {$basejobdir}r000

@ next_run = ( $last_run + 1 )
@ p1 = ( $next_run / 100 )
@ jr = ( $next_run - ( 100 * $p1 ) )
@ p2 = ( $jr / 10 )
@ p3 = ( $jr - ( 10 * $p2 ) )
set pind={$p1}{$p2}{$p3}

set jobdir={$basejobdir}r{$pind}

#=============================================================
# Lastly move all data to desired job directory:

# Move temporary directory to job directory:
mv $tmpdir $jobdir
cd $jobdir
set datadir=`pwd`

# Copy handy script for viewing spectra:
/bin/cp $bindir/sv .
# Copy handy scripts for viewing fields:
/bin/cp $bindir/dv .
/bin/cp $bindir/ddv .
/bin/cp $bindir/odv .
/bin/cp $bindir/oddv .
# Copy handy scripts for viewing zonal averages:
/bin/cp $bindir/zv .
/bin/cp $bindir/pcont.py .

echo ' ' >> job_info
echo ' Job directory:' $datadir >> job_info

echo
echo ' To set the job running, type'
echo
echo cd $datadir
#echo "bat log" $algo
echo
