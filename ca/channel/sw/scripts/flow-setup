#!/bin/csh

#=========================================================================#
#   Job setup script for the channel caps sw class of f90 codes.
#   
#=========================================================================#

echo
echo '-----------------------------------------------------'
echo '   The periodic-channel single-layer shallow-water'
echo '        Combined Lagrangian Advection Method'
echo '-----------------------------------------------------'

# Specify code numerical method class:
set meth="ca"
# Specify code geometry:
set geom="channel"
# Specify model equation type:
set equa="sw"
# Specify code type:
set algo="caps"

#==========================================================================
# The following is totally generic!
set local_home=${HOME}
set hydradir=$local_home/hydra/$meth/$geom/$equa

# Get output base directory:
set basedir=`workdir`
# Make the base data directory if it does not already exist:
if (!(-d $basedir)) mkdir $basedir
set basedir=$basedir/hydra
if (!(-d $basedir)) mkdir $basedir
set basedir=$basedir/$meth
if (!(-d $basedir)) mkdir $basedir
set basedir=$basedir/$geom
if (!(-d $basedir)) mkdir $basedir
set basedir=$basedir/$equa
if (!(-d $basedir)) mkdir $basedir
set basedir=$basedir/$algo
if (!(-d $basedir)) mkdir $basedir

set outdir=$basedir

# Assign source and binary directories:
set srcdir=$hydradir/$algo
set bindir=$hydradir/scripts

# Get the name of the computer to record in the job_info file below:
set host=`hostname | awk -F. '{print $(1)}'`

#==========================================================================
# generate a random number seed based on current time:
set second=`date +%-S`
set minute=`date +%-M`
set hour=`date +%-H`
set day=`date +%-d`
@ iseed = ( $second + ( 60 * ( $minute + 60 * ( $hour + ( 24 * $day ) ) ) ) )

# Create a temporary directory:
set tmpdir=$outdir/tmp{$iseed}
mkdir $tmpdir
cd $tmpdir

echo
echo ' *** Job will be built in the temporary directory '
echo $tmpdir

# Create a job information summary file:
touch job_info
echo ' Job created at                      ' `date` >> job_info
echo ' on                                  ' $host >> job_info
echo ' ' >> job_info

#==========================================================================
# Get the data generation routine to be used:
set dataopt="1"
echo
# Note: "baroclinic" refers to the mode with the smallest deformation length
echo ' Choose one of the following flow initialisation methods:'
echo    '   (1) a flow in near geostrophic balance, or'
echo -n '   (2) an inertia--gravity wave (default 1) '
set var=$<
if ($var != "") set dataopt=$var
echo

# Set defaults for each data generation type:
if ($dataopt == "1") then 
   set datagen = "geobal"

    # Physical parameters:
   set lxdpi = "2"     # Domain width  L_x divided by pi
   set lydpi = "1"     # Domain height L_y divided by pi
   set kd = "6.0"      # Rossby deformation wavenumber (kd = f/c)

    # Numerical parameters:
   set nx = "256"      # Inversion grid resolution in x (east - west)
   set nq="80"         # Number of contours used to represent PV
   set tgsave="1.0"    # Grid data save time increment
   set tcsave="10.0"   # Contour data save time increment
   set tsim="20.0"     # Total simulation time

    # Create input file for routine:
   set afac = "0.2"
   set bfac = "0.2"
   set efac = "0.2"
   set ffac = "0.8"

   echo
   echo ' We consider a dimensionless height anomaly of the form'
   echo ' h = h_0 + eps*h_1, where'
   echo ' h_0 = A*cos(ly)*log(1 + B*y*cos(kx)) + C, and'
   echo ' h_1 = (4*eta^3 - 3*eta)*sin(kx) with eta = y/L_y.'
   echo ' Here k = 2*pi/L_x and l = pi/L_y, and C is found by'
   echo ' requiring <h> = 0.'
   echo
   echo -n ' Enter A (default' $afac'): '
   set var=$<
   if ($var != "") set afac=$var
   echo -n ' Enter B (default' $bfac'): '
   set var=$<
   if ($var != "") set bfac=$var
   echo
   echo ' When eps = 0, the ageostrophic vorticity = 0.'
   echo
   echo -n ' Enter eps (default' $efac'): '
   set var=$<
   if ($var != "") set efac=$var
   echo
   echo ' The flow is made divergent by multiplying v by a factor F .ne. 1.'
   echo
   echo -n ' Enter F (default' $ffac'): '
   set var=$<
   if ($var != "") set ffac=$var

   echo $afac $bfac > in_$datagen
   echo $efac >> in_$datagen
   echo $ffac >> in_$datagen

else if ($dataopt == "2") then 
   set datagen = "igw"

    # Physical parameters:
   set lxdpi = "2"     # Domain width  L_x divided by pi
   set lydpi = "1"     # Domain height L_y divided by pi
   set kd = "2.0"      # Rossby deformation wavenumber (kd = f/c)

    # Numerical parameters:
   set nx = "256"      # Inversion grid resolution in x (east - west)
   set nq = "80"       # Number of contours used to represent PV
   set period=`echo "0.5 / sqrt(1.0 + 2.0 / ($kd * $kd))" | bc -l`
   set tgsave=`echo "$period / 6.0" | bc -l` # Grid data save time increment
   set tcsave="100000.0"                     # Contour data save time increment
   set tsim=`echo "2.0 * $period" | bc -l`   # Total simulation time

    # Create input file for routine:
   set eps = "0.001"
   set sso = "1"

   echo
   echo ' We consider an inertia--gravity wave with y velocity'
   echo ' v = eps*cos(k*x-omega*t)*cos(l*y), where k = 2*pi/L_x,'
   echo ' l = pi/L_y, and omega = s*sqrt(f^2 + c^2*(k^2+l^2)).'
   echo
   echo -n ' Enter eps (default' $eps'): '
   set var=$<
   if ($var != "") set eps=$var
   echo -n ' Enter s (either +1 or -1; default' $sso'): '
   set var=$<
   if ($var != "") set sso=$var

   echo $eps $sso > in_$datagen

else 
   echo ' Not a valid choice - exiting...'
   /bin/rm -r $tmpdir  
   exit(-1)
endif

#==========================================================================
# Set fixed constants:
set pi=3.14159265358979323846

#==========================================================================
# Choose main physical parameters:
echo
echo ' We take the width of the domain (in x) to be '$lxdpi'*pi.'
echo -n ' Width of the domain in y divided by pi, L_y/pi (default' $lydpi')? '
set var=$<
if ($var != "") set lydpi=$var
set ellx=`echo "$lxdpi * $pi" | bc -l`
set elly=`echo "$lydpi * $pi" | bc -l`
echo ' Width of the domain in x, L_x:      ' $lxdpi"*pi" >> job_info
echo ' Width of the domain in y, L_y:      ' $lydpi"*pi" >> job_info

#==========================================================================
# Choose numerical parameters:
echo
echo -n ' Grid resolution in x (default' $nx')? '
set var=$<
if ($var != "") set nx=$var
echo ' Inversion grid resolution in x:     ' $nx >> job_info

# Set y resolution so that dx = dy (as closely as possible):
set fny=`echo "($nx*$lydpi)/$lxdpi + 0.5" | bc -l`
set ny=${fny:r}
echo -n ' Grid resolution in y (default' $ny')? '
set var=$<
if ($var != "") set ny=$var
echo ' Inversion grid resolution in y:     ' $ny >> job_info

echo -n ' No. of PV jumps to represent the PV variation (default' $nq')? '
set var=$<
if ($var != "") set nq=$var
echo ' Number of jumps to represent PV, nq:' $nq >> job_info

echo
echo -n ' Time interval between gridded data saves (default' $tgsave')? '
set var=$<
if ($var != "") set tgsave=$var
echo ' Time interval between data saves:   ' $tgsave >> job_info

echo -n ' Time interval between contour data saves (default' $tcsave')? '
set var=$<
if ($var != "") set tcsave=$var
echo ' Time interval between contour saves:' $tcsave >> job_info

echo -n ' Total simulation time (default' $tsim')? '
set var=$<
if ($var != "") set tsim=$var
echo ' Total simulation time:              ' $tsim >> job_info
echo ' ' >> job_info

echo
set cof=`echo "scale=12; 4.0*$pi" | bc -l`
echo ' We take the Coriolis frequency f = 4*pi, corresponding to an inertial'
echo ' period of one "day".'
echo
echo ' We take the short-scale gravity-wave speed c = f*L_D where L_D is the'
echo ' Rossby deformation length.'
echo 
echo -n ' Rossby deformation wavenumber, k_d = f/c (default' $kd')? '
set var=$<
if ($var != "") set kd=$var
echo ' Rossby def. wavenumber, k_D:        ' $kd >> job_info

# Compute c:
set cgw=`echo "scale=12; $cof/$kd" | bc -l`

echo ' Rossby deformation wavenumber, f/c: ' $kd >> job_info
echo ' ' >> job_info

# Choose a marginally gravity-wave resolving time step:
set dtmult="0.75"
echo -n ' We choose the time step dt = M*dx/c; enter M (default' $dtmult'): '
set var=$<
if ($var != "") set dtmult=$var

set dt=`echo "scale=14; $dtmult*$ellx/($nx*$cgw)" | bc -l`
# Adjust to be a fraction of the grid save time:
set fac=`echo "scale=14; $tgsave/$dt" | bc -l`
set dt=`echo "scale=14; $tgsave/$fac:r" | bc -l`
echo ' This corresponds to dt =' $dt

echo ' Time step dt = M*dx/c:              ' $dt >> job_info
echo ' M:                                  ' $dtmult >> job_info
echo ' ' >> job_info

# Hyperviscosity:
set nnu=3
set cdamp="10"
echo
echo ' ***Lap^n hyperdiffusion is applied to spectral fields.'
echo -n ' Power, n (default' $nnu')? '
set var=$<
if ($var != "") set nnu=$var
echo -n ' Damping rate on wavenumber k = nx/2 (default' $cdamp')? '
set var=$<
if ($var != "") set cdamp=$var

echo ' ' >> job_info
echo ' ***Lap^'{$nnu} 'Hyperdiffusion on delta_tilde & gamma' >> job_info
echo ' Damping rate on k = nx/2 is C*f;  C:' $cdamp >> job_info

#============================================================
# Build parameter file with cpp and make all codes:
mkdir src
cd src
cp $srcdir/* .
cp -r $hydradir/init .
cp -r $hydradir/post .

echo 
echo " Compiling source files....."
echo " -----------------------------------------------------------------------"

# Use C pre-processor to put chosen parameters $copts into parameters.f90
set copts="-DN_X=$nx -DN_Y=$ny -DN_CONTQ=$nq -DT_STEP={$dt}d0 -DT_SIM={$tsim}d0 -DT_GSAVE={$tgsave}d0 -DT_CSAVE={$tcsave}d0 -DL_X={$ellx}d0 -DL_Y={$elly}d0 -DCOR_FREQ={$cof}d0 -DC_GW={$cgw}d0 -DC_DAMP={$cdamp} -DPOW_HYPER=$nnu"

precomp $copts parameters.f90

make $algo setup $datagen proxy_post_all install clean

cd ..
echo " -----------------------------------------------------------------------"
echo 

#============================================================
# Execute the data generation script:
$datagen < in_$datagen > out_$datagen

#==========================================================================
# Create a directory named after the data generation script:
cd ..
if (!(-d $datagen)) mkdir $datagen
cd $datagen

# Set the job directory name (will be appended by 001, 002 etc...):
set basejobdir=nx{$nx}
if ($ny     !=   $nx) set basejobdir={$basejobdir}ny{$ny}
if ($kd     != "0.0") set basejobdir={$basejobdir}kd{$kd}

echo -n ' Job directory name (default '{$basejobdir}')? '
set var=$<
if ($var != "") set basejobdir=$var

# work out the last run which has been performed:
# First make a bogus empty directory so this works!
mkdir {$basejobdir}r000
set last_run = `/bin/ls -d {$basejobdir}r??? | tail -c 4 | head -c 3`
rmdir {$basejobdir}r000

@ next_run = ( $last_run + 1 )
@ p1 = ( $next_run / 100 )
@ jr = ( $next_run - ( 100 * $p1 ) )
@ p2 = ( $jr / 10 )
@ p3 = ( $jr - ( 10 * $p2 ) )
set pind={$p1}{$p2}{$p3}

set jobdir={$basejobdir}r{$pind}

#=============================================================
# Lastly move all data to desired job directory:

# Move temporary directory to job directory:
mv $tmpdir $jobdir
cd $jobdir
set datadir=`pwd`

# Copy handy scripts:
/bin/cp $bindir/dv .
/bin/cp $bindir/ddv .
/bin/cp $bindir/restart .

echo ' ' >> job_info
echo ' Job directory:' >> job_info
echo $datadir >> job_info

echo ' '
echo ' To set the job running, type'
echo ' '
echo cd $datadir
#echo bat log $algo
echo tail -f log
echo
